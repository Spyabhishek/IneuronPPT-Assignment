const express = require('express');
const app = express();

// Middleware to parse JSON bodies
app.use(express.json());

// Sample data to store tasks
let todos = [];

// Route to get all todos
app.get('/', (req, res) => {
  res.json(todos);
});

// Middleware to validate task input
const validateTaskInput = (req, res, next) => {
  const { task } = req.body;
  if (!task) {
    res.status(400).json({ message: 'Validation failed. Task is required.' });
  } else {
    next();
  }
};

// Route to create a new todo
app.post('/add', validateTaskInput, (req, res) => {
  const { task } = req.body;
  const newTodo = { id: Date.now(), task };
  todos.push(newTodo);
  res.json({ message: 'Todo created successfully.', data: todos });
});

// Route to update a todo
app.put('/update/:id', validateTaskInput, (req, res) => {
  const { id } = req.params;
  const { task } = req.body;
  const todo = todos.find((todo) => todo.id === parseInt(id));
  if (!todo) {
    res.status(404).json({ message: 'Todo not found.' });
  } else {
    todo.task = task;
    res.json({ message: 'Todo updated successfully.', data: todos });
  }
});

// Route to delete a todo
app.delete('/delete/:id', (req, res) => {
  const { id } = req.params;
  const index = todos.findIndex((todo) => todo.id === parseInt(id));
  if (index === -1) {
    res.status(404).json({ message: 'Todo not found.' });
  } else {
    todos.splice(index, 1);
    res.json({ message: 'Todo deleted.', data: todos });
  }
});

// Start the server
const port = 3000;
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
